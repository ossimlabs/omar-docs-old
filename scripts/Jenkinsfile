//==================================================================================================
// This is the Jenkins pipeline script for building the OMAR jpip application.
// Environment varialbes that MUST be passed in by Jenkins:
//    OSSIM_GIT_BRANCH: The tag of the branch to be built. Typically dev or master.
//
// Environment varaibles that MUST be set in the Jenkins global environment (manage jenkins -> configure system -> environment varaibles)
//    ARTIFACTORY_USER: The user to use when pushing artifacts
//    ARTIFACTORY_PASSWORD: The password to use when pushing artifacts
//    OPENSHIFT_USERNAME: The user to use logging into the docker registry
//    OPENSHIFT_PASSWORD: The password to use logging into the docker registry
//==================================================================================================
def notifyObj
node(""){
    def workspaceDir = pwd()
    def appName = "omar-docs"
    def omarCommonProjName = "omar-common"
    env.OMAR_COMMON_PROPERTIES = "${ workspaceDir }/${ omarCommonProjName }/omar-common-properties.gradle"
    env.O2_DEV_HOME=pwd()

    stage( "Checkout" ){
        dir( appName ) {
            git branch: "${ OSSIM_GIT_BRANCH }", url: "${GIT_PUBLIC_SERVER_URL}/${ appName }.git"
        }

        dir( omarCommonProjName ) {
            git branch: "${ OSSIM_GIT_BRANCH }", url: "${GIT_PUBLIC_SERVER_URL}/${ omarCommonProjName }.git"
        }

    }
    stage("Download Artifacts"){
       step ([$class: "CopyArtifact",
             projectName: "ossim-ci-${OSSIM_GIT_BRANCH}",
             filter: "ossim-ci-${OSSIM_GIT_BRANCH}.tgz",
             flatten: true])
       sh "tar xvfz ossim-ci-${OSSIM_GIT_BRANCH}.tgz"
       notifyObj = load "${env.WORKSPACE}/ossim-ci/jenkins/pipeline/notify.groovy"
    }

    try {
        stage( "Create Docs" ) {
            withCredentials([
                [
                    $class: 'UsernamePasswordMultiBinding',
                    credentialsId: 'ossimlabs-minion',
                    usernameVariable: 'GIT_USERNAME',
                    passwordVariable: 'GIT_PASSWORD'
                ],
                [
                    $class: 'UsernamePasswordMultiBinding',
                    credentialsId: 'dockerCredentials',
                    usernameVariable: 'OPENSHIFT_USERNAME',
                    passwordVariable: 'OPENSHIFT_PASSWORD'
                ]
            ]) {
                dir( "${ env.WORKSPACE }/omar-docs" ) {
                    sh """
                        echo $OSSIM_GIT_BRANCH
                        ./mkdocs.sh
                        tar cvfz docs.tgz site
                        cp docs.tgz ${ workspaceDir }/${ appName }/apps/${ appName }-app/docker
                    """
               step([$class: 'S3BucketPublisher',
                dontWaitForConcurrentBuildCompletion: false,
                entries: [
                           [bucket: "o2-delivery/${OSSIM_GIT_BRANCH}/o2-install-guide",
                           excludedFile: '',
                           flatten: false,
                           gzipFiles: false,
                           keepForever: false,
                           managedArtifacts: false,
                           noUploadOnFailure: false,
                           selectedRegion: 'us-east-1',
                           showDirectlyInBrowser: true,
                           sourceFile: "docs.tgz",
                           storageClass: 'STANDARD',
                           uploadFromSlave: false,
                           useServerSideEncryption: false]],
                profileName: 'o2-cicd',
                userMetadata: []])
                }
            }
        }
        stage ( "Publish Docker App" ) {
            withCredentials([[$class: 'UsernamePasswordMultiBinding',
                credentialsId: 'dockerCredentials',
                usernameVariable: 'OPENSHIFT_USERNAME',
                passwordVariable: 'OPENSHIFT_PASSWORD']]) {

                // Run all tasks on the app. This includes pushing to OpenShift and S3.
                sh """
                    pushd ${ workspaceDir }/${appName}
                    gradle :${appName}-app:${GRADLE_TASK}
                    popd
                """
            }
        }
    }
    catch( e ) {
        echo e.toString()
        currentBuild.result = "FAILED"
        notifyObj?.notifyFailed()
    }
    stage( "Clean Workspace" ){
        step([$class: 'WsCleanup'])
    }
}
